import { ClerkClient as ClerkClient$1, AuthObject, createClerkClient } from '@clerk/backend';
export * from '@clerk/backend';
import { AuthenticateRequestOptions } from '@clerk/backend/internal';
import { Request, RequestHandler } from 'express';

declare const clerkClient: ClerkClient$1;

type ExpressRequestWithAuth = Request & {
    auth: AuthObject;
};
type ClerkMiddlewareOptions = AuthenticateRequestOptions & {
    debug?: boolean;
    clerkClient?: ClerkClient;
    /**
     * Enables Clerk's handshake flow, which helps verify the session state
     * when a session JWT has expired. It issues a 307 redirect to refresh
     * the session JWT if the user is still logged in.
     *
     * This is useful for server-rendered fullstack applications to handle
     * expired JWTs securely and maintain session continuity.
     */
    enableHandshake?: boolean;
};
/**
 * Middleware for Express that handles authentication and authorization with Clerk.
 * For more details, please refer to the docs: https://clerk.com/docs/references/express/overview?utm_source=github&utm_medium=expres
 */
interface ClerkMiddleware {
    /**
     * @example
     * const handler = (request, response, next) => {
     *   ...;
     *   // if next is not called the request will be terminated or hung.
     *   return next();
     * }
     * app.use(clerkMiddleware(handler, options));
     */
    (handler: RequestHandler, options?: ClerkMiddlewareOptions): RequestHandler[];
    /**
     * @example
     * app.use(clerkMiddleware(options));
     *
     * @example
     * const clerkClient = createClerkClient({ ... });
     * app.use(clerkMiddleware({ clerkClient }));
     *
     * @example
     * app.use(clerkMiddleware());
     */
    (options?: ClerkMiddlewareOptions): RequestHandler[];
}
type ClerkClient = ReturnType<typeof createClerkClient>;

declare const clerkMiddleware: ClerkMiddleware;

/**
 * Retrieves the Clerk AuthObject using the current request object.
 *
 * @param {ExpressRequest} req - The current request object.
 * @returns {AuthObject} Object with information about the request state and claims.
 * @throws {Error} `clerkMiddleware` is required to be set in the middleware chain before this util is used.
 */
declare const getAuth: (req: Request) => AuthObject;

/**
 * This error is typically thrown by the `requireAuth` middleware when
 * a request is made to a protected route without proper authentication.
 *
 * @class
 * @extends Error
 *
 * @example
 * // This error is usually handled in an Express error handling middleware
 * app.use((err, req, res, next) => {
 *   if (err instanceof UnauthorizedError) {
 *     res.status(401).send('Unauthorized');
 *   } else {
 *     next(err);
 *   }
 * });
 */
declare class UnauthorizedError extends Error {
    constructor();
}
/**
 * This error is typically used when a user is authenticated but lacks the necessary permissions
 * to access a resource or perform an action.
 *
 * @class
 * @extends Error
 *
 * @example
 * // This error can be used in custom authorization middleware
 * const checkPermission = (req, res, next) => {
 *   const auth = getAuth(req)
 *   if (!auth.has({ permission: 'permission' })) {
 *     return next(new ForbiddenError());
 *   }
 *   next();
 * };
 *
 * @example
 * // This error is usually handled in an Express error handling middleware
 * app.use((err, req, res, next) => {
 *   if (err instanceof ForbiddenError) {
 *     res.status(403).send('Forbidden');
 *   } else {
 *     next(err);
 *   }
 * });
 */
declare class ForbiddenError extends Error {
    constructor();
}
/**
 * Middleware to require authentication for user requests.
 * Passes an UnauthorizedError to the next middleware for unauthenticated requests,
 * which should be handled by an error middleware.
 *
 * @example
 * // Basic usage
 * import { requireAuth, UnauthorizedError } from '@clerk/express'
 *
 * router.get('/path', requireAuth, getHandler)
 * //or
 * router.use(requireAuth)
 *
 * router.use((err, req, res, next) => {
 *   if (err instanceof UnauthorizedError) {
 *     res.status(401).send('Unauthorized')
 *   } else {
 *     next(err)
 *   }
 * })
 *
 * @example
 * // Combining with permission check
 * import { requireAuth, ForbiddenError } from '@clerk/express'
 *
 * const hasPermission = (req, res, next) => {
 *    const auth = getAuth(req)
 *    if (!auth.has({ permission: 'permission' })) {
 *      return next(new ForbiddenError())
 *    }
 *    return next()
 * }
 * router.get('/path', requireAuth, hasPermission, getHandler)
 *
 * @throws {Error} If `clerkMiddleware` is not set in the middleware chain before this util is used.
 */
declare const requireAuth: RequestHandler;

export { type ClerkMiddleware, type ExpressRequestWithAuth, ForbiddenError, UnauthorizedError, clerkClient, clerkMiddleware, getAuth, requireAuth };
